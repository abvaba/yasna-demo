@mixin push--auto {
  margin: {
    left: auto;
    right: auto;
  }
}

@mixin responsive-ratio($x,$y, $pseudo: false) {
  $padding: unquote(( $y / $x ) * 100 + '%');
  @if $pseudo {
    &:before {
      @include pseudo($pos: relative);
      width: 100%;
      padding-top: $padding;
    }
  } @else {
    padding-top: $padding;
  }
}

@mixin css-triangle($color, $direction, $size: 6px, $position: absolute, $round: false) {
  @include pseudo($pos: $position);
  width: 0;
  height: 0;
  @if $round {
    border-radius: 3px;
  }
  @if $direction == down {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-top: $size solid $color;
    margin-top: 0 - round( $size / 2.5 );
  } @else if $direction == up {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-bottom: $size solid $color;
    margin-bottom: 0 - round( $size / 2.5 );
  } @else if $direction == right {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-left: $size solid $color;
    margin-right: -$size;
  } @else if $direction == left {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-right: $size solid $color;
    margin-left: -$size;
  }
}

$breakpoints: (
    "s": "640px",
    // => @media (min-width: 640px) {...}
    "m": "768px",
    // => @media (min-width: 768px) {...}
    "l": "1024px",
    // => @media (min-width: 1024px) {...}
    "x": "1280px",
    // => @media (min-width: 1280px) {...}
    "t": "1536px"
    // => @media (min-width: 1536px) {...}
);
@mixin mq($width, $type: min) {
  @if map_has_key($breakpoints, $width) {
    $width: map_get($breakpoints, $width);
    @if $type == max {
      $width: $width - 1px;
    }
    @media only screen and (#{$type}-width: $width) {
      @content;
    }
  }
}

//@function z($name) {
//    @if index($z-indexes, $name) {
//        @return (length($z-indexes) - index($z-indexes, $name)) + 1;
//    } @else {
//        @warn 'There is no item "#{$name}" in this list; choose one of: #{$z-indexes}';
//        @return null;
//    }
//}
//$z-indexes: (
//    "outdated-browser",
//    "modal",
//    "site-header",
//    "page-wrapper",
//    "site-footer"
//);

//@mixin hardware($backface: true, $perspective: 1000) {
//    @if $backface {
//        backface-visibility: hidden;
//    }
//    perspective: $perspective;
//}

@mixin center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translateY(-50%) translateX(-50%);
}

//@function setLongShadow($color, $length) {
//    $value: 0 0 $color;
//
//    @for $i from 1 through $length {
//        $value: #{$value}, #{$i}px #{$i}px #{$color};
//    }
//
//    @return $value;
//}

//@mixin longShadow($color, $length:200) {
//    text-shadow: setLongShadow($color, $length);
//}
// Magic parallax mixins

//$parallax-perspective : 1 !default;
//$parallax-element     : "body" !default;
//$parallax-ios         : true !default;
//
//@mixin parallax-init(
//    $perspective  : $parallax-perspective,
//    $element      : $parallax-element,
//    $parallax-ios : $parallax-ios
//) {
//    @if $element == "body" {
//        html, body {
//            width: 100%;
//            height: 100%;
//            margin: 0;
//            padding: 0;
//            overflow: hidden;
//        }
//    }
//    #{$element} {
//        overflow: auto;
//        perspective: $perspective * 1px;
//        transform-style: preserve-3d;
//        // Allows for smooth scrolling but disables parallax effects.
//        @if $parallax-ios == false {
//            -webkit-overflow-scrolling: touch;
//        }
//        // Preserve 3D
//        &, * {
//            transform-style: preserve-3d;
//        }
//    }
//}
//
//@mixin parallax(
//    $distance    : 0,
//    $perspective : $parallax-perspective
//) {
//    transform:
//            translateZ($distance * $perspective * 1px)
//            scale(abs($distance - 1))
//;
//    z-index: $distance * 1000;
//}
//
//// End of magic parallax mixins
// --------- fluid-type-mixin ------------------
/* Basic Settings*/
$fontSize-min: 16px;
$fontSize-max: 24px;
$lineHeight-base: 1.5;


/* Type Scale Settings*/
$Width-min: 320px;
$Width-max: 1280px;
$scaleFactor: 1.2;
$baseline: 1.5rem;


/* Type Scale Chart*/
$scale6: $scaleFactor * $scaleFactor * $scaleFactor * $scaleFactor * $scaleFactor * $scaleFactor;
$scale5: $scaleFactor * $scaleFactor * $scaleFactor * $scaleFactor * $scaleFactor;
$scale4: $scaleFactor * $scaleFactor * $scaleFactor * $scaleFactor;
$scale3: $scaleFactor * $scaleFactor * $scaleFactor;
$scale2: $scaleFactor * $scaleFactor;
$scale1: $scaleFactor;
@mixin fluid-type($properties: font-size, $min-vw: 320px, $max-vw: 1280px, $min-value: 12px, $max-value: 16px) {
  @each $property in $properties {
    #{$property}: $min-value;
  }

  @media screen and (min-width: $min-vw) {
    @each $property in $properties {
      #{$property}: -webkit-calc(#{$min-value} + #{strip-unit($max-value - $min-value)} * (100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)});
      #{$property}: calc(#{$min-value} + #{strip-unit($max-value - $min-value)} * (100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)});
    }
  }

  @media screen and (min-width: $max-vw) {
    @each $property in $properties {
      #{$property}: $max-value;
    }
  }
}

@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

$debug-color: #000000;
@mixin debug-layout {
  outline: 1px dotted lighten($debug-color, 0%);
  > * {
    outline: 1px dotted lighten($debug-color, 10%);

    > * {
      outline: 1px dotted lighten($debug-color, 20%);

      > * {
        outline: 1px dotted lighten($debug-color, 30%);

        > * {
          outline: 1px dotted lighten($debug-color, 40%);
        }
      }
    }
  }
}

@mixin text-contrast($n) {
  $w: #ffffff;
  $color-brightness: round((red($n)*299) + (green($n)*587) + (blue($n)*114) / 1000);
  $light-color: round((red($w)*299) + (green($w)*587) + (blue($w)*114) / 1000);
  @if abs($color-brightness) < ($light-color / 2) {
    color: #ffffff;
  } @else {
    color: #000000;
  }
}

@mixin fz($size) {
  font-size: calc(1rem + #{$size}vmin);
}

@mixin fzi($size) {
  font-size: calc(1rem + #{$size}vmin) !important;
}

%ms {
  box-shadow: 0 1px 3px rgba(0, 0, 0, .12), 0 1px 2px rgba(0, 0, 0, .24);
  transition: box-shadow .3s cubic-bezier(.25, .8, .25, 1)
}

%msh {
  box-shadow: 0 14px 28px rgba(0, 0, 0, .25), 0 10px 10px rgba(0, 0, 0, .22)
}
%airbnb{
  box-shadow: rgba(0, 0, 0, 0.18) 0 2px 4px;
}
@mixin t{
  transition: .3s all ease-in-out;
}

@mixin dp($dp__color){
  --bgSize : 12px;
  background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 18 18'%3E%3Ccircle fill='%23#{$dp__color}' cx='9' cy='9' r='3'/%3E%3C/svg%3E");
  background-repeat: repeat;
  background-size: var(--bgSize) var(--bgSize);
}
@mixin gl($gl__color) {
  background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 69.8 69.8'%3E%3CradialGradient id='SVGID_1_' cx='34.9029' cy='34.9029' r='44.1035' fx='28.6649' fy='23.2404' gradientUnits='userSpaceOnUse'%3E%3Cstop offset='0' style='stop-color:%23FFFFFF'/%3E%3Cstop offset='1' style='stop-color:%23#{$gl__color}'/%3E%3C/radialGradient%3E%3Ccircle fill='url(%23SVGID_1_)' cx='34.9' cy='34.9' r='34.9'/%3E%3C/svg%3E%0A");
  background-repeat: no-repeat;
}